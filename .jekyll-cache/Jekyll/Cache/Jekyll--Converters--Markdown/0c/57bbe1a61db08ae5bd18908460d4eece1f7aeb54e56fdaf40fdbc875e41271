I"¬=<p>SOURCE:</p>

<ul>
  <li><a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a></li>
  <li><a href="https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo">https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo</a></li>
  <li><a href="https://medium.com/@morgler/dont-use-redux-9e23b5381291">https://medium.com/@morgler/dont-use-redux-9e23b5381291</a></li>
  <li><a href="https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook--a4983397">https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook‚Äìa4983397</a></li>
</ul>

<p><span style="display:block;text-align:center"><img src="/assets/img/reactlifecycle.png" alt="Octocat" /></span></p>

<p>Why react-hooks?</p>

<p><span style="display:block;text-align:center"><img src="/assets/img/reacthooks.png" alt="Octocat" /></span></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ComponentWithHook</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span><span class="na">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button&gt;</span><span class="err">;
</span><span class="p">};</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ComponentWithHook</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div>

<p>Hooks were created to encapsulate side effects and stateful behaviour in such components. If we look at this code through our data structure lens, we can see that:</p>

<p>ComponentWithHook is a function which returns an object (all JXS calls are translated into objects by this babel plugin)</p>

<p>In ComponentWithHook, we call a function that returns two values which we destructure</p>

<p>React hooks has been created to avoid developers introducing too much abstraction with a separate state management library (redux, mobx‚Ä¶). That often requires to jumb between different files, write excessive amounts of code and lose time.</p>

<p>The Hooks are stored as a linked list. What‚Äôs a linked list? There is actually a ton to linked lists, but in its most basic form a linked list is a data structure that consists of nodes. Each node has its data and also a reference that points to the next node in the list. The order of nodes is entirely dependent on each node‚Äôs reference to the next.</p>

<p>On the first render of a component, a linked list of the Hooks called gets created and on subsequent renders.</p>

<p>In Javascript this is can look something like this:</p>

<p>React components pass through three lifecycles: Mounting, Updating and Unmounting.</p>

<ul>
  <li>Mounting is simply putting a component in the DOM by converting the virtual components into actual DOM elements that are placed in the DOM by React.</li>
  <li>Updating is whenever there is a change in the component. This could be either via props or state.</li>
</ul>

<p><span style="display:block;text-align:center"><img src="/assets/img/state.png" alt="Octocat" /></span></p>

<p><span style="display:block;text-align:center"><img src="/assets/img/usestate.png" alt="Octocat" /></span></p>

<p>The idea is to create an array of listeners and only one state object. Every time that one component changes the state, all subscribed components get their setState() functions fired and get updated.</p>

<p>We can do that by calling useState() inside our custom Hook. But, instead returning the setState() function, we add it to an array of listeners and return a function which updates the state object and run all listeners functions.</p>

<ul>
  <li>The state of a component is an object that holds information that may change over the lifetime of the component.</li>
  <li>Unmounting is when a component is removed from the DOM</li>
</ul>

<p>With functional components, some of these lifecycle methods are mimicked with react hooks. React Hooks are a way for your function components to ‚Äúhook‚Äù into React‚Äôs lifecycle and state.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">useHook</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">hooks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">hookData</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">reactInternalRenderAComponentMethod</span><span class="p">(</span><span class="nx">component</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="nx">component</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">hooksForThisComponent</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">;</span>
  <span class="nx">hooks</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I‚Äôd say Hooks are about as much magic as calling array.push and array.pop (for which the call order matters too!).</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyReact</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kd">let</span> <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// array of hooks, and an iterator!</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">(</span><span class="nx">Component</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">Comp</span> <span class="o">=</span> <span class="nx">Component</span><span class="p">();</span> <span class="c1">// run effects</span>
      <span class="nx">Comp</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
      <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// reset for next render</span>
      <span class="k">return</span> <span class="nx">Comp</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">useEffect</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">depArray</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">hasNoDeps</span> <span class="o">=</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">deps</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">];</span> <span class="c1">// type: array | undefined</span>
      <span class="kd">const</span> <span class="nx">hasChangedDeps</span> <span class="o">=</span> <span class="nx">deps</span>
        <span class="p">?</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">===</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">hasNoDeps</span> <span class="o">||</span> <span class="nx">hasChangedDeps</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">callback</span><span class="p">();</span>
        <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">depArray</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">currentHook</span><span class="o">++</span><span class="p">;</span> <span class="c1">// done with this hook</span>
    <span class="p">},</span>
    <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">||</span> <span class="nx">initialValue</span><span class="p">;</span> <span class="c1">// type: any</span>
      <span class="kd">const</span> <span class="nx">setStateHookIndex</span> <span class="o">=</span> <span class="nx">currentHook</span><span class="p">;</span> <span class="c1">// for setState's closure!</span>
      <span class="kd">const</span> <span class="nx">setState</span> <span class="o">=</span> <span class="p">(</span><span class="nx">newState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">setStateHookIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">[</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="o">++</span><span class="p">],</span> <span class="nx">setState</span><span class="p">];</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">})();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example 0</span>
<span class="kd">function</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">_val</span> <span class="o">=</span> <span class="nx">initialValue</span><span class="p">;</span> <span class="c1">// _val is a local variable created by useState</span>
  <span class="kd">function</span> <span class="nx">state</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// state is an inner function, a closure</span>
    <span class="k">return</span> <span class="nx">_val</span><span class="p">;</span> <span class="c1">// state() uses _val, declared by parent funciton</span>
  <span class="p">}</span>
  <span class="kd">function</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// same</span>
    <span class="nx">_val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span> <span class="c1">// setting _val without exposing _val</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span> <span class="c1">// exposing functions for external use</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">setFoo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// using array destructuring</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// logs 0 - the initialValue we gave</span>
<span class="nx">setFoo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// sets _val inside useState's scope</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// logs 1 - new initialValue, despite exact same call</span>
</code></pre></div></div>

<p>‚ö°Ô∏è Effect Hook</p>

<p>You‚Äôve likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations ‚Äúside effects‚Äù (or ‚Äúeffects‚Äù for short) because they can affect other components and can‚Äôt be done during rendering.</p>

<p>Instead of thinking in terms of ‚Äúmounting‚Äù and ‚Äúupdating‚Äù, you might find it easier to think that effects happen ‚Äúafter render‚Äù. React guarantees the DOM has been updated by the time it runs the effects. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM.</p>

<p>Unlike componentDidMount or componentDidUpdate, effects scheduled with useEffect don‚Äôt block the browser from updating the screen. By default, effects run after every completed render. But, you can choose to fire it only when certain values have changed, passing an array of variables as a second optional parameter.</p>

<p>This makes your app feel more responsive. The majority of effects don‚Äôt need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate useLayoutEffect Hook with an API identical to useEffect.</p>

<p>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn‚Äôt depend on any values from props or state, so it never needs to re-run.</p>

<p>Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to useEffect may return a clean-up function.</p>
:ET