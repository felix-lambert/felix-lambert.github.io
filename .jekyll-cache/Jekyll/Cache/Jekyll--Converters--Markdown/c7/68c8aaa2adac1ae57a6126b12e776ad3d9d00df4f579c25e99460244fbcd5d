I"<p>SOURCE:</p>

<ul>
  <li><a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a></li>
  <li><a href="https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo">https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo</a></li>
  <li><a href="https://medium.com/@morgler/dont-use-redux-9e23b5381291">https://medium.com/@morgler/dont-use-redux-9e23b5381291</a></li>
  <li><a href="https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook--a4983397">https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook–a4983397</a></li>
</ul>

<p><span style="display:block;text-align:center"><img src="/assets/img/reactlifecycle.png" alt="Octocat" /></span></p>

<p>Why react-hooks?</p>

<p><span style="display:block;text-align:center"><img src="/assets/img/reacthooks.png" alt="Octocat" /></span></p>

<p>To avoid developers introducing too much abstraction with a separate state management library (redux, mobx…) that often requires to jump between different files, write excessive amounts of code and lose time. the facebook team invented react hooks in 2015.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ComponentWithHook</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">bool</span><span class="p">,</span> <span class="nx">setBool</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{},</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">bool</span><span class="p">]);</span>
  <span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useRef</span><span class="p">();</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span><span class="na">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/button&gt;</span><span class="err">;
</span><span class="p">};</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ComponentWithHook</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">memoizedState</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// the setCount hook</span>
  <span class="nx">baseState</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nx">queue</span><span class="p">:</span> <span class="p">{</span> <span class="cm">/* ... */</span><span class="p">},</span>
  <span class="nx">baseUpdate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="nx">next</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// the setBool hook</span>
    <span class="nl">memoizedState</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nx">baseState</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nx">queue</span><span class="p">:</span> <span class="p">{</span> <span class="cm">/* ... */</span><span class="p">},</span>
    <span class="nx">baseUpdate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nx">next</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// the useEffect hook</span>
      <span class="nl">memoizedState</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">tag</span><span class="p">:</span> <span class="mi">192</span><span class="p">,</span>
        <span class="nx">create</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
        <span class="nx">destory</span><span class="p">:</span> <span class="kc">undefined</span><span class="p">,</span>
        <span class="nx">deps</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">],</span>
        <span class="nx">next</span><span class="p">:</span> <span class="p">{</span> <span class="cm">/* ... */</span><span class="p">}</span>
      <span class="p">},</span>
      <span class="nx">baseState</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="nx">queue</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="nx">baseUpdate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="nx">next</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// the useRef hook</span>
        <span class="nl">memoizedState</span><span class="p">:</span> <span class="p">{</span>
          <span class="nl">current</span><span class="p">:</span> <span class="kc">undefined</span>
        <span class="p">},</span>
        <span class="nx">baseState</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="nx">queue</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="nx">baseUpdate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Hooks creates on the first render, a linked list of mutable fiber objects to represent the entire DOM. It holds the states that preserves from re-renders and store the data of a component. It also has a reference that points to the next node of the tree.</p>
:ET