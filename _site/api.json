{
    "website_title": "Felix's blog",
    "website_url": "http://localhost:4000/",
    "posts": [
        
            {
                "title": "Does a developer need to be nice?",
                "content_text": "SOURCE:  https://www.youtube.com/watch?v=J9OpTNk0hYc&amp;t=164s  https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/  https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/  https://www.youtube.com/watch?v=YYzt71o2IvQ  https://www.youtube.com/watch?v=rS2HYJKndRc&amp;t=578s  https://www.amazon.com/Empathic-Civilization-Global-Consciousness-Crisis-ebook/dp/B0030CVQJY/ref=sr_1_3?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;dchild=1&amp;keywords=jeremy+rifkin+english&amp;qid=1598624938&amp;sr=8-3  https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html“[…] to be fully present at work, to feel “psychologically safe”, we must know that we can be free enough, sometimes, to share the things that scare us without fear of recriminations. We must be able to talk about what is messy or sad, to have hard conversations with colleagues who are driving us crazy. We can’t be focused just on efficiency. Rather, when we start the morning by collaborating with a team of engineers and then send emails to our marketing colleagues and then jump on a conference call, we want to know that those people really hear us. We want to know that work is more than just labor. The New York Times”Software developers have to take empathy very seriously, because when companies want to hire them, they now focus on communication skills. If you’re an amazing programmer but you don’t know how to work in a group, with benevolence, you will not offer psychological safety.So we need to choose very precisely the words we use and make sure that others did get it and didn’t feel offended. It’s an exercise that requires training. For example, when we see a complicated code to read, to harmonize with this code, you can provide in return a clear and benevolent communication.",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://www.youtube.com/watch?v=J9OpTNk0hYc&amp;t=164s\">https://www.youtube.com/watch?v=J9OpTNk0hYc&amp;t=164s</a></li>  <li><a href=\"https://www.youtube.com/watch?v=BsGXEiW7D3A&amp;t=162s\">https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</a></li>  <li><a href=\"https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/\">https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/</a></li>  <li><a href=\"https://www.youtube.com/watch?v=YYzt71o2IvQ\">https://www.youtube.com/watch?v=YYzt71o2IvQ</a></li>  <li><a href=\"https://www.youtube.com/watch?v=rS2HYJKndRc&amp;t=578s\">https://www.youtube.com/watch?v=rS2HYJKndRc&amp;t=578s</a></li>  <li><a href=\"https://www.amazon.com/Empathic-Civilization-Global-Consciousness-Crisis-ebook/dp/B0030CVQJY/ref=sr_1_3?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;dchild=1&amp;keywords=jeremy+rifkin+english&amp;qid=1598624938&amp;sr=8-3\">https://www.amazon.com/Empathic-Civilization-Global-Consciousness-Crisis-ebook/dp/B0030CVQJY/ref=sr_1_3?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;dchild=1&amp;keywords=jeremy+rifkin+english&amp;qid=1598624938&amp;sr=8-3</a></li>  <li><a href=\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\">https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html</a></li></ul><p>“[…] to be fully present at work, to feel “psychologically safe”, we must know that we can be free enough, sometimes, to share the things that scare us without fear of recriminations. We must be able to talk about what is messy or sad, to have hard conversations with colleagues who are driving us crazy. We can’t be focused just on efficiency. Rather, when we start the morning by collaborating with a team of engineers and then send emails to our marketing colleagues and then jump on a conference call, we want to know that those people really hear us. We want to know that work is more than just labor. <a href=\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\">The New York Times</a>”</p><p>Software developers have to take empathy very seriously, because when companies want to hire them, they now focus on communication skills. If you’re an amazing programmer but you don’t know how to work in a group, with benevolence, you will not offer psychological safety.</p><p>So we need to choose very precisely the words we use and make sure that others did get it and didn’t feel offended. It’s an exercise that requires training. For example, when we see a complicated code to read, to harmonize with this code, you can provide in return a clear and benevolent communication.</p>",
                "url": "http://localhost:4000/posts/2019/11/07/does-a-developer-needs-to-be-nice/",
                
                                
                
                "tags": ["technology"],
                "date_published": "2019-11-07T11:18:00+01:00",
                "date_modified": "2019-11-07T11:18:00+01:00",
                
                "author":  "Felix Lambert" 
                
            },
        
            {
                "title": "Clean code javascript",
                "content_text": "SOURCE:  https://github.com/airbnb/javascript  https://google.github.io/styleguide/jsguide.html  https://medium.com/@konstankino/2019-reactjs-best-practices-design-patterns-516e1c3ca06a  https://americanexpress.io/clean-code-dirty-code/  https://dmitripavlutin.com/react-usestate-hook-guide/  https://lightsonsoftware.com/writing-code-that-reads-like-a-story/  https://opensource.com/business/15/10/jane-austen-on-python  https://eloquentjavascript.net/Eloquent_JavaScript.pdf  https://www.w3.org/wiki/JavaScript_best_practicesThe end goal of code is to be understood by a machine and by another human being. This is like communication: like code, if you speak and no one understands you, you’re only speaking to yourself and others cannot make any use of it.Envisioning code as a story can be a useful metaphor for helping to create clean code. If the audience has difficulty reading your story, it will not be a pleasant experience for them. They will not be able to work with it, explain the nuances to others, or adapt it in the future.So clean code is just simple code. Nothing else. If you repeat yourself, you don’t abstract, if your code still stays simple, it doesn’t matter.NamingUse meaningful and pronounceable variable namesBad:let d;let elapsed;const ages = arr.map((i) =&gt; i.age);Good:let daysSinceModification;const agesOfUsers = users.map((user) =&gt; user.age);Make meaningful distinctions and don’t add extra, unnecessary nouns to the variable nameBad:let nameString;let theUsers;Good:let name;let users;Make your variable names easy to pronounce, because for the human mind it takes less effort to processIn short, don’t cause extra mental mapping with your names.Bad:let fName, lName;let cntr;let full = false;if (cart.size &gt; 100) {  full = true;}Good:let firstName, lastName;let counter;const MAX_CART_SIZE = 100;// ...const isFull = cart.size &gt; MAX_CART_SIZE;Use searchable namesWe will read more code than we will ever write. It’s important that the code we do write is readable and searchable. By not naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.Bad:// What the heck is 86400000 for?setTimeout(blastOff, 86400000);Good:// Declare them as capitalized named constants.const MILLISECONDS_IN_A_DAY = 86400000;setTimeout(blastOff, MILLISECONDS_IN_A_DAY);Use explanatory variablesBad:const address = \"One Infinite Loop, Cupertino 95014\";const cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;saveCityZipCode(  address.match(cityZipCodeRegex)[1],  address.match(cityZipCodeRegex)[2]);Good:const address = \"One Infinite Loop, Cupertino 95014\";const cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;const [, city, zipCode] = address.match(cityZipCodeRegex) || [];saveCityZipCode(city, zipCode);Avoid Mental MappingExplicit is better than implicit.Bad:const locations = [\"Austin\", \"New York\", \"San Francisco\"];locations.forEach((l) =&gt; {  doStuff();  doSomeOtherStuff();  // ...  // ...  // ...  // Wait, what is `l` for again?  dispatch(l);});Good:const locations = [\"Austin\", \"New York\", \"San Francisco\"];locations.forEach((location) =&gt; {  doStuff();  doSomeOtherStuff();  // ...  // ...  // ...  dispatch(location);});Use the same vocabulary for the same type of variableBad:getUserInfo();getClientData();getCustomerRecord();Good:getUser();Function names should say what they doUse long, descriptive names. A long descriptive name is way better than a short, enigmatic name or a long descriptive comment.Bad:function addToDate(date, month) {  // ...}const date = new Date();// It's hard to tell from the function name what is addedaddToDate(date, 1);function inv(user) {  /* implementation */}Good:function addMonthToDate(month, date) {  // ...}const date = new Date();addMonthToDate(1, date);function inviteUser(emailAddress) {  /* implementation */}Functions should be named for what they do, not how they do itBad:const loadConfigFromServer = () =&gt; {  ...};Good:// goodconst loadConfig = () =&gt; {  ...};Don’t indent unnecessarilyToo many nested indentations often create a distorted view of its complexity.Bad:function processItems(list) {  var result = [];  if (items.length &gt; 0) {    normalize(items);    for (var index = 0, len = items.length; index &lt; len; ++index) {      // long code…    }  }  return result;}Good:function processItems(list) {  var result = [];  if (items.length &lt;= 0) return result;  normalize(items);  for (var index = 0, len = items.length; index &lt; len; ++index) {    // long code…  }  return result;}FunctionsUse default arguments instead of short circuiting or conditionalsDefault arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for undefined arguments. Other “falsy” values such as ‘’, “”, false, null, 0, and NaN, will not be replaced by a default value.Bad:function createMicrobrewery(name) {  const breweryName = name || \"Hipster Brew Co.\";  // ...}Good:function createMicrobrewery(name = \"Hipster Brew Co.\") {  // ...}Function arguments (2 or fewer ideally)Usually, if you have more than two arguments then your function is trying to do too much. In cases where it’s not, most of the time a higher-level object will suffice as an argument.Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.Bad:function createMenu(title, body, buttonText, cancellable) {  // ...}Good:function createMenu({ title, body, buttonText, cancellable }) {  // ...}createMenu({  title: \"Foo\",  body: \"Bar\",  buttonText: \"Baz\",  cancellable: true,});Functions should do one thingThis is by far the most important rule in software engineering. When functions do more than one thing, they are harder to reason about. When you can isolate a function to just one action, your code will read much cleaner.Bad:function emailClients(clients) {  clients.forEach((client) =&gt; {    const clientRecord = database.lookup(client);    if (clientRecord.isActive()) {      email(client);    }  });}Good:function emailActiveClients(clients) {  clients.filter(isActiveClient).forEach(email);}function isActiveClient(client) {  const clientRecord = database.lookup(client);  return clientRecord.isActive();}ObjectsDon’t add unneeded contextIf your class/object name tells you something, don’t repeat that in your variable name.Bad:const Car = {  carMake: \"Honda\",  carModel: \"Accord\",  carColor: \"Blue\",};function paintCar(car) {  car.carColor = \"Red\";}Good:const Car = {  make: \"Honda\",  model: \"Accord\",  color: \"Blue\",};function paintCar(car) {  car.color = \"Red\";}Don’t use flags as function parametersFlags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.Bad:function createFile(name, temp) {  if (temp) {    fs.create(`./temp/${name}`);  } else {    fs.create(name);  }}Good:function createFile(name) {  fs.create(name);}function createTempFile(name) {  createFile(`./temp/${name}`);}Encapsulate conditionalsBad:if (fsm.state === \"fetching\" &amp;&amp; isEmpty(listNode)) {  // ...}Good:function shouldShowSpinner(fsm, listNode) {  return fsm.state === \"fetching\" &amp;&amp; isEmpty(listNode);}if (shouldShowSpinner(fsmInstance, listNodeInstance)) {  // ...}Avoid negative conditionalsBad:function isDOMNodeNotPresent(node) {  // ...}if (!isDOMNodeNotPresent(node)) {  // ...}Good:function isDOMNodePresent(node) {  // ...}if (isDOMNodePresent(node)) {  // ...}Error HandlingThrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it’s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.Build on the shoulders of giantsReactThe DOMWe want to touch the DOM as little as possible. The DOM is a very complex API and rendering in browsers can take up a lot of time.Separate stateful aspects from renderingBad:class User extends Component {  state = { loading: true };  render() {    const { loading, user } = this.state;    return loading ? (      &lt;div&gt;Loading...&lt;/div&gt;    ) : (      &lt;div&gt;        &lt;div&gt;First name: {user.firstName}&lt;/div&gt;        &lt;div&gt;First name: {user.lastName}&lt;/div&gt;        ...      &lt;/div&gt;    );  }  componentDidMount() {    fetchUser(this.props.id).then((user) =&gt; {      this.setState({ loading: false, user });    });  }}Good:class User extends Component {  state = { loading: true };  render() {    const { loading, user } = this.state;    return loading ? &lt;Loading /&gt; : &lt;RenderUser user={user} /&gt;;  }  componentDidMount() {    fetchUser(this.props.id).then((user) =&gt; {      this.setState({ loading: false, user });    });  }}Name your event handlers with handle prefixes, such as handleClick() or handleUpdate().",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a></li>  <li><a href=\"https://google.github.io/styleguide/jsguide.html\">https://google.github.io/styleguide/jsguide.html</a></li>  <li><a href=\"https://medium.com/@konstankino/2019-reactjs-best-practices-design-patterns-516e1c3ca06a\">https://medium.com/@konstankino/2019-reactjs-best-practices-design-patterns-516e1c3ca06a</a></li>  <li><a href=\"https://americanexpress.io/clean-code-dirty-code/\">https://americanexpress.io/clean-code-dirty-code/</a></li>  <li><a href=\"https://dmitripavlutin.com/react-usestate-hook-guide/\">https://dmitripavlutin.com/react-usestate-hook-guide/</a></li>  <li><a href=\"https://lightsonsoftware.com/writing-code-that-reads-like-a-story/\">https://lightsonsoftware.com/writing-code-that-reads-like-a-story/</a></li>  <li><a href=\"https://opensource.com/business/15/10/jane-austen-on-python\">https://opensource.com/business/15/10/jane-austen-on-python</a></li>  <li><a href=\"https://eloquentjavascript.net/Eloquent_JavaScript.pdf\">https://eloquentjavascript.net/Eloquent_JavaScript.pdf</a></li>  <li><a href=\"https://www.w3.org/wiki/JavaScript_best_practices\">https://www.w3.org/wiki/JavaScript_best_practices</a></li></ul><p>The end goal of code is to be understood by a machine and by another human being. This is like communication: like code, if you speak and no one understands you, you’re only speaking to yourself and others cannot make any use of it.</p><p>Envisioning code as a story can be a useful metaphor for helping to create clean code. If the audience has difficulty reading your story, it will not be a pleasant experience for them. They will not be able to work with it, explain the nuances to others, or adapt it in the future.</p><p>So clean code is just simple code. Nothing else. If you repeat yourself, you don’t abstract, if your code still stays simple, it doesn’t matter.</p><h1 id=\"naming\">Naming</h1><h2 id=\"use-meaningful-and-pronounceable-variable-names\">Use meaningful and pronounceable variable names</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">d</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">elapsed</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">ages</span> <span class=\"o\">=</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">daysSinceModification</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">agesOfUsers</span> <span class=\"o\">=</span> <span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"make-meaningful-distinctions-and-dont-add-extra-unnecessary-nouns-to-the-variable-name\">Make meaningful distinctions and don’t add extra, unnecessary nouns to the variable name</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">nameString</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">theUsers</span><span class=\"p\">;</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">name</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">users</span><span class=\"p\">;</span></code></pre></div></div><h2 id=\"make-your-variable-names-easy-to-pronounce-because-for-the-human-mind-it-takes-less-effort-to-process\">Make your variable names easy to pronounce, because for the human mind it takes less effort to process</h2><p>In short, don’t cause extra mental mapping with your names.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">fName</span><span class=\"p\">,</span> <span class=\"nx\">lName</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">cntr</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">full</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cart</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">full</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">counter</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">MAX_CART_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"c1\">// ...</span><span class=\"kd\">const</span> <span class=\"nx\">isFull</span> <span class=\"o\">=</span> <span class=\"nx\">cart</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">&gt;</span> <span class=\"nx\">MAX_CART_SIZE</span><span class=\"p\">;</span></code></pre></div></div><h2 id=\"use-searchable-names\">Use searchable names</h2><p>We will read more code than we will ever write. It’s important that the code we do write is readable and searchable. By not naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// What the heck is 86400000 for?</span><span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">blastOff</span><span class=\"p\">,</span> <span class=\"mi\">86400000</span><span class=\"p\">);</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Declare them as capitalized named constants.</span><span class=\"kd\">const</span> <span class=\"nx\">MILLISECONDS_IN_A_DAY</span> <span class=\"o\">=</span> <span class=\"mi\">86400000</span><span class=\"p\">;</span><span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">blastOff</span><span class=\"p\">,</span> <span class=\"nx\">MILLISECONDS_IN_A_DAY</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"use-explanatory-variables\">Use explanatory variables</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">One Infinite Loop, Cupertino 95014</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">cityZipCodeRegex</span> <span class=\"o\">=</span> <span class=\"sr\">/^</span><span class=\"se\">[^</span><span class=\"sr\">,</span><span class=\"se\">\\\\]</span><span class=\"sr\">+</span><span class=\"se\">[</span><span class=\"sr\">,</span><span class=\"se\">\\\\\\s]</span><span class=\"sr\">+</span><span class=\"se\">(</span><span class=\"sr\">.+</span><span class=\"se\">?)\\s</span><span class=\"sr\">*</span><span class=\"se\">(\\d{5})?</span><span class=\"sr\">$/</span><span class=\"p\">;</span><span class=\"nx\">saveCityZipCode</span><span class=\"p\">(</span>  <span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">cityZipCodeRegex</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">],</span>  <span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">cityZipCodeRegex</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"p\">);</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">One Infinite Loop, Cupertino 95014</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">cityZipCodeRegex</span> <span class=\"o\">=</span> <span class=\"sr\">/^</span><span class=\"se\">[^</span><span class=\"sr\">,</span><span class=\"se\">\\\\]</span><span class=\"sr\">+</span><span class=\"se\">[</span><span class=\"sr\">,</span><span class=\"se\">\\\\\\s]</span><span class=\"sr\">+</span><span class=\"se\">(</span><span class=\"sr\">.+</span><span class=\"se\">?)\\s</span><span class=\"sr\">*</span><span class=\"se\">(\\d{5})?</span><span class=\"sr\">$/</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"p\">[,</span> <span class=\"nx\">city</span><span class=\"p\">,</span> <span class=\"nx\">zipCode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">cityZipCodeRegex</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[];</span><span class=\"nx\">saveCityZipCode</span><span class=\"p\">(</span><span class=\"nx\">city</span><span class=\"p\">,</span> <span class=\"nx\">zipCode</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"avoid-mental-mapping\">Avoid Mental Mapping</h2><p>Explicit is better than implicit.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Austin</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">San Francisco</span><span class=\"dl\">\"</span><span class=\"p\">];</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">doStuff</span><span class=\"p\">();</span>  <span class=\"nx\">doSomeOtherStuff</span><span class=\"p\">();</span>  <span class=\"c1\">// ...</span>  <span class=\"c1\">// ...</span>  <span class=\"c1\">// ...</span>  <span class=\"c1\">// Wait, what is `l` for again?</span>  <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Austin</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">San Francisco</span><span class=\"dl\">\"</span><span class=\"p\">];</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">doStuff</span><span class=\"p\">();</span>  <span class=\"nx\">doSomeOtherStuff</span><span class=\"p\">();</span>  <span class=\"c1\">// ...</span>  <span class=\"c1\">// ...</span>  <span class=\"c1\">// ...</span>  <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></div><h2 id=\"use-the-same-vocabulary-for-the-same-type-of-variable\">Use the same vocabulary for the same type of variable</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">getUserInfo</span><span class=\"p\">();</span><span class=\"nx\">getClientData</span><span class=\"p\">();</span><span class=\"nx\">getCustomerRecord</span><span class=\"p\">();</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">getUser</span><span class=\"p\">();</span></code></pre></div></div><h2 id=\"function-names-should-say-what-they-do\">Function names should say what they do</h2><p>Use long, descriptive names. A long descriptive name is way better than a short, enigmatic name or a long descriptive comment.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">addToDate</span><span class=\"p\">(</span><span class=\"nx\">date</span><span class=\"p\">,</span> <span class=\"nx\">month</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span><span class=\"kd\">const</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span><span class=\"c1\">// It's hard to tell from the function name what is added</span><span class=\"nx\">addToDate</span><span class=\"p\">(</span><span class=\"nx\">date</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">inv</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"cm\">/* implementation */</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">addMonthToDate</span><span class=\"p\">(</span><span class=\"nx\">month</span><span class=\"p\">,</span> <span class=\"nx\">date</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span><span class=\"kd\">const</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span><span class=\"nx\">addMonthToDate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">date</span><span class=\"p\">);</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">inviteUser</span><span class=\"p\">(</span><span class=\"nx\">emailAddress</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"cm\">/* implementation */</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"functions-should-be-named-for-what-they-do-not-how-they-do-it\">Functions should be named for what they do, not how they do it</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">loadConfigFromServer</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"p\">...</span><span class=\"p\">};</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// good</span><span class=\"kd\">const</span> <span class=\"nx\">loadConfig</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"p\">...</span><span class=\"p\">};</span></code></pre></div></div><h1 id=\"dont-indent-unnecessarily\">Don’t indent unnecessarily</h1><p>Too many nested indentations often create a distorted view of its complexity.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">processItems</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">var</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">normalize</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">);</span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">index</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"c1\">// long code…</span>    <span class=\"p\">}</span>  <span class=\"p\">}</span>  <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">processItems</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">var</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>  <span class=\"nx\">normalize</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">);</span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">index</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"c1\">// long code…</span>  <span class=\"p\">}</span>  <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><h1 id=\"functions\">Functions</h1><h2 id=\"use-default-arguments-instead-of-short-circuiting-or-conditionals\">Use default arguments instead of short circuiting or conditionals</h2><p>Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for undefined arguments. Other “falsy” values such as ‘’, “”, false, null, 0, and NaN, will not be replaced by a default value.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createMicrobrewery</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">const</span> <span class=\"nx\">breweryName</span> <span class=\"o\">=</span> <span class=\"nx\">name</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Hipster Brew Co.</span><span class=\"dl\">\"</span><span class=\"p\">;</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createMicrobrewery</span><span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hipster Brew Co.</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"function-arguments-2-or-fewer-ideally\">Function arguments (2 or fewer ideally)</h2><p>Usually, if you have more than two arguments then your function is trying to do too much. In cases where it’s not, most of the time a higher-level object will suffice as an argument.Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createMenu</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">,</span> <span class=\"nx\">buttonText</span><span class=\"p\">,</span> <span class=\"nx\">cancellable</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createMenu</span><span class=\"p\">({</span> <span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">,</span> <span class=\"nx\">buttonText</span><span class=\"p\">,</span> <span class=\"nx\">cancellable</span> <span class=\"p\">})</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span><span class=\"nx\">createMenu</span><span class=\"p\">({</span>  <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Foo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Bar</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">buttonText</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Baz</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">cancellable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"p\">});</span></code></pre></div></div><h2 id=\"functions-should-do-one-thing\">Functions should do one thing</h2><p>This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to reason about. When you can isolate a function to just one action, your code will read much cleaner.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">emailClients</span><span class=\"p\">(</span><span class=\"nx\">clients</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">clients</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"nx\">clientRecord</span> <span class=\"o\">=</span> <span class=\"nx\">database</span><span class=\"p\">.</span><span class=\"nx\">lookup</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">);</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">clientRecord</span><span class=\"p\">.</span><span class=\"nx\">isActive</span><span class=\"p\">())</span> <span class=\"p\">{</span>      <span class=\"nx\">email</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">);</span>    <span class=\"p\">}</span>  <span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">emailActiveClients</span><span class=\"p\">(</span><span class=\"nx\">clients</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">clients</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">isActiveClient</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"kd\">function</span> <span class=\"nx\">isActiveClient</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">const</span> <span class=\"nx\">clientRecord</span> <span class=\"o\">=</span> <span class=\"nx\">database</span><span class=\"p\">.</span><span class=\"nx\">lookup</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">);</span>  <span class=\"k\">return</span> <span class=\"nx\">clientRecord</span><span class=\"p\">.</span><span class=\"nx\">isActive</span><span class=\"p\">();</span><span class=\"p\">}</span></code></pre></div></div><h1 id=\"objects\">Objects</h1><h2 id=\"dont-add-unneeded-context\">Don’t add unneeded context</h2><p>If your class/object name tells you something, don’t repeat that in your variable name.Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">Car</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"na\">carMake</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Honda</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">carModel</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Accord</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">carColor</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Blue</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"p\">};</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">paintCar</span><span class=\"p\">(</span><span class=\"nx\">car</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">car</span><span class=\"p\">.</span><span class=\"nx\">carColor</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Red</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">Car</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"na\">make</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Honda</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">model</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Accord</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Blue</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"p\">};</span><span class=\"kd\">function</span> <span class=\"nx\">paintCar</span><span class=\"p\">(</span><span class=\"nx\">car</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">car</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Red</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"dont-use-flags-as-function-parameters\">Don’t use flags as function parameters</h2><p>Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.</p><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createFile</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">temp</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">temp</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"s2\">`./temp/</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createFile</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"kd\">function</span> <span class=\"nx\">createTempFile</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">createFile</span><span class=\"p\">(</span><span class=\"s2\">`./temp/</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"encapsulate-conditionals\">Encapsulate conditionals</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">fsm</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">fetching</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">isEmpty</span><span class=\"p\">(</span><span class=\"nx\">listNode</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">shouldShowSpinner</span><span class=\"p\">(</span><span class=\"nx\">fsm</span><span class=\"p\">,</span> <span class=\"nx\">listNode</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"nx\">fsm</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">fetching</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">isEmpty</span><span class=\"p\">(</span><span class=\"nx\">listNode</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">shouldShowSpinner</span><span class=\"p\">(</span><span class=\"nx\">fsmInstance</span><span class=\"p\">,</span> <span class=\"nx\">listNodeInstance</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"avoid-negative-conditionals\">Avoid negative conditionals</h2><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">isDOMNodeNotPresent</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isDOMNodeNotPresent</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">isDOMNodePresent</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isDOMNodePresent</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// ...</span><span class=\"p\">}</span></code></pre></div></div><h1 id=\"error-handling\">Error Handling</h1><p>Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it’s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.</p><h1 id=\"build-on-the-shoulders-of-giants\">Build on the shoulders of giants</h1><h2 id=\"react\">React</h2><h3 id=\"the-dom\">The DOM</h3><p>We want to touch the DOM as little as possible. The DOM is a very complex API and rendering in browsers can take up a lot of time.</p><h3 id=\"separate-stateful-aspects-from-rendering\">Separate stateful aspects from rendering</h3><p>Bad:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">User</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">};</span>  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">loading</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"nx\">loading</span> <span class=\"p\">?</span> <span class=\"p\">(</span>      <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Loading</span><span class=\"p\">...</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"p\">(</span>      <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">First</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">First</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"p\">...</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span>  <span class=\"p\">}</span>  <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">fetchUser</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">});</span>    <span class=\"p\">});</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Good:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">User</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">};</span>  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">loading</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"nx\">loading</span> <span class=\"p\">?</span> <span class=\"o\">&lt;</span><span class=\"nx\">Loading</span> <span class=\"o\">/&gt;</span> <span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"nx\">RenderUser</span> <span class=\"nx\">user</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span>  <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">fetchUser</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">});</span>    <span class=\"p\">});</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"name-your-event-handlers-with-handle-prefixes-such-as-handleclick-or-handleupdate\">Name your event handlers with handle prefixes, such as <code class=\"highlighter-rouge\">handleClick()</code> or <code class=\"highlighter-rouge\">handleUpdate()</code>.</h3>",
                "url": "http://localhost:4000/posts/2019/11/07/clean-code-javascript/",
                
                                
                
                "tags": ["technology"],
                "date_published": "2019-11-07T11:18:00+01:00",
                "date_modified": "2019-11-07T11:18:00+01:00",
                
                "author":  "Felix Lambert" 
                
            },
        
            {
                "title": "In defence of web scraping",
                "content_text": "SOURCE:  https://www.youtube.com/watch?v=8J7TRSLf55U  https://hackernoon.com/web-scraping-and-the-fight-for-the-open-internet-ly1o2t8i  https://hackernoon.com/the-evolution-of-big-data-and-web-scraping-mk1y3ucv  https://hackernoon.com/the-a-z-of-web-scraping-in-2020-a-how-to-guide-sg263y8d  Season 3 of westworld  https://www.youtube.com/watch?v=tcMdWM8wmqs  https://en.wikipedia.org/wiki/Robots_exclusion_standard  https://en.wikipedia.org/wiki/Search_engine_scraping  https://www.youtube.com/watch?v=guvsH5OFizE  http://info.cern.ch/hypertext/WWW/TheProject.htmlWhen I say to people that I’m doing “web scraping” for my personal project, they either don’t know what I’m talking about or look at me with eyes of fear. The term “web scraping” has a negative connotation today. It’s often seen as unethical or/and illegal.Why illegal?Some companies could even sue you (there have been dozens of legal cases on web scraping over the decades) or do some lobbying to make it illegal. It might not work but it gives a force of dissuasion: people might experience the guilt of doing something illegal.Why unethical?Of course, if you read the news, you might be thinking of Cambridge Analytica or other organizations that scraps social media user data and manipulate by sending advertisements, fake news…We realize today that you can do web scraping to sell data to states, industries, advertisement companies or to rig an election. All this is, of course, harmful because the end goal is control and manipulation (pushing people to buy, to vote for the person who pays for you…). If the end goal is only money, power and control, we will end up with ads, surveillance everywhere. The web will become senseless and data will become a simple tool for controlling humans. Season 3 of westworld or episode 1 season 3 of black mirror gives us a good illustration of what we need to avoid.If you want a centralized computer that monitors everything, and data with one owner, you need to be like Facebook and ask users to hand over their data by means of an authentication system. If the technological architecture is designed this way, the data will belong to the company and no one else. If you decide to put all the data collected by users behind an authentication system, you decide not to share data, but to keep it for yourself.All this is pretty bad, I agree. But it doesn’t necessarily mean that we need to condemn web scraping. I would like to rehabilitate this practice if it’s OK and see if we can change direction.But to do this, we need to go back first to the basics and see what a cool thing the web actually is.What is the web?The web is basically linked documents (you click on a link and it brings you to another document from a specific computer). These linked documents can be shown by asking a specific computer to download it into your browser with an http/https protocol.We call these computers ‘servers’ because they are configured in such a way that it can listen to our requests. ‘Servers’ turn a program in background waiting for some messages to come so that it can answer and deliver the required document or data.The content of these html documents is digital data. Why digital? Because they are binary (0 1). The browser translates this binary data to data that a human can understand.This is maybe a basic definition of what we call the web. The enormous value of it today is that all these documents, coming from different computers are linked together (with hyperlinks). Like university papers, or academic books, they often provide sources.It’s extremely important to note that there is no super-computer that monitors all these documents. Nor are there any super computers that monitor all these little computers. The information is spread horizontally in a decentralized way, through different computers.When everything seems to be controlled by an institution, a company, a state in the offline world…, no one really controls the online world and some even say that this world has been made (not really by the us army, but by everyone of us that decides to add document files on the web) to be uncontrollable.In summary, we can see the web as an enormous library of documents linked to each other with no owner. If data had owners and strict copyright, we would not be able to build a search engine. The web would become a very messy library with no way of finding the documents that users really need.What is web scraping now?  “The largest public known incident of a search engine being scraped happened in 2011 when Microsoft was caught scraping unknown keywords from Google for their own, rather new Bing service. But even this incident did not result in a court case.”  “One possible reason might be that search engines like Google are getting almost all their data by scraping millions of public reachable websites, also without reading and accepting those terms. A legal case won by Google against Microsoft would possibly put their whole business as risk.”Wikipedia: Search engine scrapingWeb scraping is an automated way to collect data from the web. If an API is not available, often, what needs to be done is taking a website’s HTML file, detecting the data and saving it, often into a database. So once the data is public, on the web, someone can store, monitor and/or use it.If people don’t want to access good content, it’s not the fault of the web. And this problem is not technical. It’s ethical. If we build a new architecture of the web but behaviors do not change, we will have new types of Facebook coming along. We don’t need to build a more decentralized web with other technologies, we already need to be aware of the existing potentials of the web.  The dream of one of the co-founders of google was to download the html documents of all the web, save it on his computer and do a big network of nodes based on the links he could find on each web (html) documents. He would need to first make a rule that recognizes links within webpages, transforms the link into a node and see where it is positioned in this big network.We can easily see here that Google is today’s most advanced web scraping company in existence. And, if we really want to access it, Google’s web scraping gives us the most amazing access to culture (with a big C) that there is.With these web scraping techniques, Google has given us a web that is easy to navigate.A web that is decipherable.No Web Scraping, no search engine  Without search engines like Google, the web would be nearly impossible to use. We would not be able to find out what we could do with it or the easy access would only be information from people of big influence like politicians, celebrities of the star system, or powerful advertisement companies.  So now where can we go?I think we didn’t grab very well the potential of web scraping today and it’s normal because it’s not easy. Of course the first thing that comes into our mind is to use web scraping to find cheap prices for plane tickets, restaurants, products… Which is great. But we maybe can find an even better use for it.Today, we realize that the web is the perfect thing for big data. No web, no big data, no big data, no machine learning. We have powerful enough machines now to process a lot of the data and make sense of it.We now have machine-learning techniques that scrape the web and can process and classify data in order to:  detect a serious illness fast, before it’s too late  detect a forest fire before it’s too late  detect dangerous substances in a food product  detect dangers to plant, animal or insect life (such as the varroa mite to bee populations)  detect an outbreak of a new disease before it’s too late  detect dangerous substances of product we’re eating  automatized customer services that use advanced chatbots to problem-solve help you mend stuff (by sending photos to them) and find what you need to buy for you  these chatbot could help you mend stuff (by sending photos to them) and find what you need to buy for you  machine learning can give us very precise statistics in economy, urbanism, criminality ……Other suggestions?Web scraping is useful here because we need classified data to detect something. For example, we can scrap images of skin cancer everywhere on the web and classify to automatically detect it on a random photo. We can scrap images of forest fire so that cameras can recognize a danger automatically.In summary, Web scraping can give us better access to culture, science, and with better access to culture, science… humans can maybe act in the world with greater attention to important things and/or awareness.",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://www.youtube.com/watch?v=8J7TRSLf55U\">https://www.youtube.com/watch?v=8J7TRSLf55U</a></li>  <li><a href=\"https://hackernoon.com/web-scraping-and-the-fight-for-the-open-internet-ly1o2t8i\">https://hackernoon.com/web-scraping-and-the-fight-for-the-open-internet-ly1o2t8i</a></li>  <li><a href=\"https://hackernoon.com/the-evolution-of-big-data-and-web-scraping-mk1y3ucv\">https://hackernoon.com/the-evolution-of-big-data-and-web-scraping-mk1y3ucv</a></li>  <li><a href=\"https://hackernoon.com/the-a-z-of-web-scraping-in-2020-a-how-to-guide-sg263y8d\">https://hackernoon.com/the-a-z-of-web-scraping-in-2020-a-how-to-guide-sg263y8d</a></li>  <li>Season 3 of westworld</li>  <li><a href=\"https://www.youtube.com/watch?v=tcMdWM8wmqs\">https://www.youtube.com/watch?v=tcMdWM8wmqs</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Robots_exclusion_standard\">https://en.wikipedia.org/wiki/Robots_exclusion_standard</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Search_engine_scraping\">https://en.wikipedia.org/wiki/Search_engine_scraping</a></li>  <li><a href=\"https://www.youtube.com/watch?v=guvsH5OFizE\">https://www.youtube.com/watch?v=guvsH5OFizE</a></li>  <li><a href=\"http://info.cern.ch/hypertext/WWW/TheProject.html\">http://info.cern.ch/hypertext/WWW/TheProject.html</a></li></ul><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/service.png\" alt=\"Octocat\" /></span></p><p>When I say to people that I’m doing “web scraping” for my personal project, they either don’t know what I’m talking about or look at me with eyes of fear. The term “web scraping” has a negative connotation today. It’s often seen as unethical or/and illegal.</p><h1 id=\"why-illegal\">Why illegal?</h1><p>Some companies could even sue you (there have been dozens of legal cases on web scraping over the decades) or do some lobbying to make it illegal. It might not work but it gives a force of dissuasion: people might experience the guilt of doing something illegal.</p><h1 id=\"why-unethical\">Why unethical?</h1><p>Of course, if you read the news, you might be thinking of Cambridge Analytica or other organizations that scraps social media user data and manipulate by sending advertisements, fake news…</p><p>We realize today that you can do web scraping to sell data to states, industries, advertisement companies or to rig an election. All this is, of course, harmful because the end goal is control and manipulation (pushing people to buy, to vote for the person who pays for you…). If the end goal is only money, power and control, we will end up with ads, surveillance everywhere. The web will become senseless and data will become a simple tool for controlling humans. Season 3 of westworld or episode 1 season 3 of black mirror gives us a good illustration of what we need to avoid.</p><p style=\"text-align:center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YrpK90bHO2U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p>If you want a centralized computer that monitors everything, and data with one owner, you need to be like Facebook and ask users to hand over their data by means of an authentication system. If the technological architecture is designed this way, the data will belong to the company and no one else. If you decide to put all the data collected by users behind an authentication system, you decide not to share data, but to keep it for yourself.</p><p style=\"text-align:center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OqObVUEdGEo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p style=\"text-align:center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KdtPNRzuKrk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p style=\"text-align:center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5JmY59xUPxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p>All this is pretty bad, I agree. But it doesn’t necessarily mean that we need to condemn web scraping. I would like to rehabilitate this practice if it’s OK and see if we can change direction.</p><p>But to do this, we need to go back first to the basics and see what a cool thing the web actually is.</p><h1 id=\"what-is-the-web\">What is the web?</h1><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/document.png\" alt=\"Octocat\" /></span></p><p style=\"text-align:center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_mNOXDbXr9c\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p>The web is basically linked documents (you click on a link and it brings you to another document from a specific computer). These linked documents can be shown by asking a specific computer to download it into your browser with an http/https protocol.</p><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/http.png\" alt=\"Octocat\" /></span></p><p>We call these computers ‘servers’ because they are configured in such a way that it can listen to our requests. ‘Servers’ turn a program in background waiting for some messages to come so that it can answer and deliver the required document or data.</p><p>The content of these html documents is digital data. Why digital? Because they are binary (0 1). The browser translates this binary data to data that a human can understand.</p><p>This is maybe a basic definition of what we call the web. The enormous value of it today is that all these documents, coming from different computers are linked together (with hyperlinks). Like university papers, or academic books, they often provide sources.</p><p>It’s extremely important to note that there is no super-computer that monitors all these documents. Nor are there any super computers that monitor all these little computers. The information is spread horizontally in a decentralized way, through different computers.</p><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/decentralized.png\" alt=\"Octocat\" /></span></p><p>When everything seems to be controlled by an institution, a company, a state in the offline world…, no one really controls the online world and some even say that this world has been made (not really by the us army, but by everyone of us that decides to add document files on the web) to be uncontrollable.</p><p>In summary, we can see the web as an enormous library of documents linked to each other with no owner. If data had owners and strict copyright, we would not be able to build a search engine. The web would become a very messy library with no way of finding the documents that users really need.</p><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/library.jpeg\" alt=\"Octocat\" /></span></p><h1 id=\"what-is-web-scraping-now\">What is web scraping now?</h1><blockquote>  <p><em>“The largest public known incident of a search engine being scraped happened in 2011 when Microsoft was caught scraping unknown keywords from Google for their own, rather new Bing service. But even this incident did not result in a court case.”</em></p></blockquote><blockquote>  <p><em>“One possible reason might be that search engines like Google are getting almost all their data by scraping millions of public reachable websites, also without reading and accepting those terms. A legal case won by Google against Microsoft would possibly put their whole business as risk.”</em></p></blockquote><p><a href=\"https://en.wikipedia.org/wiki/Search_engine_scraping\">Wikipedia: Search engine scraping</a></p><p>Web scraping is an automated way to collect data from the web. If an API is not available, often, what needs to be done is taking a website’s HTML file, detecting the data and saving it, often into a database. So once the data is public, on the web, someone can store, monitor and/or use it.</p><p>If people don’t want to access good content, it’s not the fault of the web. And this problem is not technical. It’s ethical. If we build a new architecture of the web but behaviors do not change, we will have new types of Facebook coming along. We don’t need to build a more decentralized web with other technologies, we already need to be aware of the existing potentials of the web.</p><p style=\"text-align:center\"><video width=\"500\" height=\"500\" controls=\"\"> <source src=\"/assets/google2.mp4\" type=\"video/mp4\" /> </video></p><p>The dream of one of the co-founders of google was to download the html documents of all the web, save it on his computer and do a big network of nodes based on the links he could find on each web (html) documents. He would need to first make a rule that recognizes links within webpages, transforms the link into a node and see where it is positioned in this big network.</p><p>We can easily see here that Google is today’s most advanced web scraping company in existence. And, if we really want to access it, Google’s web scraping gives us the most amazing access to culture (with a big C) that there is.</p><p>With these web scraping techniques, Google has given us a web that is easy to navigate.A web that is decipherable.</p><h1 id=\"no-web-scraping-no-search-engine\">No Web Scraping, no search engine</h1><p style=\"text-align:center\"><video width=\"500\" height=\"500\" controls=\"\"> <source src=\"/assets/google4.mp4\" type=\"video/mp4\" /> </video></p><p>Without search engines like Google, the web would be nearly impossible to use. We would not be able to find out what we could do with it or the easy access would only be information from people of big influence like politicians, celebrities of the star system, or powerful advertisement companies.</p><p style=\"text-align:center\"><video width=\"500\" height=\"500\" controls=\"\"> <source src=\"/assets/google.mp4\" type=\"video/mp4\" /> </video></p><h1 id=\"so-now-where-can-we-go\">So now where can we go?</h1><p>I think we didn’t grab very well the potential of web scraping today and it’s normal because it’s not easy. Of course the first thing that comes into our mind is to use web scraping to find cheap prices for plane tickets, restaurants, products… Which is great. But we maybe can find an even better use for it.</p><p>Today, we realize that the web is the perfect thing for big data. No web, no big data, no big data, no machine learning. We have powerful enough machines now to process a lot of the data and make sense of it.</p><p>We now have machine-learning techniques that scrape the web and can process and classify data in order to:</p><ul>  <li>detect a serious illness fast, before it’s too late</li>  <li>detect a forest fire before it’s too late</li>  <li>detect dangerous substances in a food product</li>  <li>detect dangers to plant, animal or insect life (such as the varroa mite to bee populations)</li>  <li>detect an outbreak of a new disease before it’s too late</li>  <li>detect dangerous substances of product we’re eating</li>  <li>automatized customer services that use advanced chatbots to problem-solve help you mend stuff (by sending photos to them) and find what you need to buy for you</li>  <li>these chatbot could help you mend stuff (by sending photos to them) and find what you need to buy for you</li>  <li>machine learning can give us very precise statistics in economy, urbanism, criminality ……</li></ul><p>Other suggestions?</p><p>Web scraping is useful here because we need classified data to detect something. For example, we can scrap images of skin cancer everywhere on the web and classify to automatically detect it on a random photo. We can scrap images of forest fire so that cameras can recognize a danger automatically.</p><p>In summary, Web scraping can give us better access to culture, science, and with better access to culture, science… humans can maybe act in the world with greater attention to important things and/or awareness.</p>",
                "url": "http://localhost:4000/posts/2019/11/01/in-the-defense-of-web-scraping/",
                
                                
                
                "tags": ["philosophy"],
                "date_published": "2019-11-01T11:18:00+01:00",
                "date_modified": "2019-11-01T11:18:00+01:00",
                
                "author":  "Felix Lambert" 
                
            },
        
            {
                "title": "How does react-native works?",
                "content_text": "SOURCE:  https://subscription.packtpub.com/book/application_development/9781787282537/1/01lvl1sec9/how-the-react-native-bridge-from-javascript-to-native-world-works  https://reactnative.dev/docs/communication-ios  https://facebook.github.io/react-native/  https://en.wikipedia.org/wiki/React_Native  https://www.youtube.com/watch?v=qSRrxpdMpVc&amp;t=231s  https://www.youtube.com/watch?v=rReCzR6DMEM  https://gist.github.com/kiok46/28743cd78fdd864322c12306eef0cff2  https://github.com/jondot/rn-snoopy  https://blog.logrocket.com/overcoming-single-threaded-limitations-in-react-native/  https://reactnative.dev/docs/performance  https://stackoverflow.com/questions/53588142/the-benefits-of-react-native-javascriptcore  https://stackoverflow.com/questions/33479180/what-does-react-native-use-to-allow-javascript-to-be-executed-on-ios-and-android  https://www.freecodecamp.org/news/how-react-native-constructs-app-layouts-and-how-fabric-is-about-to-change-it-dd4cb510d055/  https://www.reactnative.guide/3-react-native-internals/3.1-react-native-internals.html  https://www.youtube.com/watch?time_continue=1&amp;v=0MlT74erp60&amp;feature=emb_logo  https://www.youtube.com/watch?time_continue=1&amp;v=8N4f4h6SThc&amp;feature=emb_logo  https://www.youtube.com/watch?time_continue=3&amp;v=UcqRXTriUVI&amp;feature=emb_logo  https://levelup.gitconnected.com/wait-what-happens-when-my-react-native-application-starts-an-in-depth-look-inside-react-native-5f306ef3250f  https://www.raywenderlich.com/1227-javascriptcore-tutorial-for-ios-getting-started  https://www.youtube.com/watch?v=_IiDHmAPH28Let’s understand what happens when a user starts running a react-native appTo run the application one of the following commands is issued via the command-line interface (CLI): react-native run-ios or react-native run-android  This command runs at the native entry point thread (native thread) on which your Android (Java/Kotlin) or IOS (Swift/Objective C) app is running. This thread is automatically assigned by the phone’s operating system.  The native thread (or main thread) has access to what the user is seeing. All events (touch event, timer event, network request event…) are listened on the native side.      The command creates a RootView (RCTRootView) that gives everything visible to the user.        The RootView creates the Bridge Interface.    The Bridge takes care of the communication by serializing it through JSON messages (on the native side and on the JavaScript side) so that it can pass across. This communication is actually quite similar to a client (native thread) and a server (JS thread).      The Bridge Interface will send messages to create the JavaScript (JS) thread to execute the code that is written in react-native.        Once the Bridge passes serialized payload to JavaScript, Event is processed and your application logic comes into play.    Like all JavaScript virtual machines, this JS thread is an event loop where your react application lives, API calls are made, touch events are interpreted, etc. It will start loading JS bundles into a single main.bundle.js file by compiling it into EcmaScript 5 using babel (Babel JavaScript compiler).  When React starts rendering it sends the changes to another thread: the Shadow thread.  React-native uses flexbox to style and position the elements in the screen. But the native UI has his own layout system so it does not understand flexbox. This is why react-native has created his own library called yoga to translate the flexbox css to the mobile layout.  The shadow thread is like a mathematical engine which finally decides on how to compute the view positions in a tree of nodes, like the html.   Let’s look at this code as an example:```jsx let d const App = props = { return (  Hello there  ) }```  If the JS thread wants a view and text to be created it will batch the request into a single message and send it across to the shadow thread to interpret the positions for the native thread. Then the message will be rendered to the Native thread to render the the UI.&lt;View /&gt; or &lt;TextInput /&gt; or &lt;Text/&gt; are special components compiled into native code. The &lt;View&gt; component will be linked to android.view for android and UIView for ios. &lt;TextInput&gt; will be linked to EditText for android and UITextField for IOS.  Since only the main thread is able to render something on the screen, shadow thread should send generated layout to the main thread, and only then UI renders.",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://subscription.packtpub.com/book/application_development/9781787282537/1/01lvl1sec9/how-the-react-native-bridge-from-javascript-to-native-world-works\">https://subscription.packtpub.com/book/application_development/9781787282537/1/01lvl1sec9/how-the-react-native-bridge-from-javascript-to-native-world-works</a></li>  <li><a href=\"https://reactnative.dev/docs/communication-ios\">https://reactnative.dev/docs/communication-ios</a></li>  <li><a href=\"https://facebook.github.io/react-native/\">https://facebook.github.io/react-native/</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/React_Native\">https://en.wikipedia.org/wiki/React_Native</a></li>  <li><a href=\"https://www.youtube.com/watch?v=qSRrxpdMpVc&amp;t=231s\">https://www.youtube.com/watch?v=qSRrxpdMpVc&amp;t=231s</a></li>  <li><a href=\"https://www.youtube.com/watch?v=rReCzR6DMEM\">https://www.youtube.com/watch?v=rReCzR6DMEM</a></li>  <li><a href=\"https://gist.github.com/kiok46/28743cd78fdd864322c12306eef0cff2\">https://gist.github.com/kiok46/28743cd78fdd864322c12306eef0cff2</a></li>  <li><a href=\"https://github.com/jondot/rn-snoopy\">https://github.com/jondot/rn-snoopy</a></li>  <li><a href=\"https://blog.logrocket.com/overcoming-single-threaded-limitations-in-react-native/\">https://blog.logrocket.com/overcoming-single-threaded-limitations-in-react-native/</a></li>  <li><a href=\"https://reactnative.dev/docs/performance\">https://reactnative.dev/docs/performance</a></li>  <li><a href=\"https://stackoverflow.com/questions/53588142/the-benefits-of-react-native-javascriptcore\">https://stackoverflow.com/questions/53588142/the-benefits-of-react-native-javascriptcore</a></li>  <li><a href=\"https://stackoverflow.com/questions/33479180/what-does-react-native-use-to-allow-javascript-to-be-executed-on-ios-and-android\">https://stackoverflow.com/questions/33479180/what-does-react-native-use-to-allow-javascript-to-be-executed-on-ios-and-android</a></li>  <li><a href=\"https://www.freecodecamp.org/news/how-react-native-constructs-app-layouts-and-how-fabric-is-about-to-change-it-dd4cb510d055/\">https://www.freecodecamp.org/news/how-react-native-constructs-app-layouts-and-how-fabric-is-about-to-change-it-dd4cb510d055/</a></li>  <li><a href=\"https://www.reactnative.guide/3-react-native-internals/3.1-react-native-internals.html\">https://www.reactnative.guide/3-react-native-internals/3.1-react-native-internals.html</a></li>  <li><a href=\"https://www.youtube.com/watch?time_continue=1&amp;v=0MlT74erp60&amp;feature=emb_logo\">https://www.youtube.com/watch?time_continue=1&amp;v=0MlT74erp60&amp;feature=emb_logo</a></li>  <li><a href=\"https://www.youtube.com/watch?time_continue=1&amp;v=8N4f4h6SThc&amp;feature=emb_logo\">https://www.youtube.com/watch?time_continue=1&amp;v=8N4f4h6SThc&amp;feature=emb_logo</a></li>  <li><a href=\"https://www.youtube.com/watch?time_continue=3&amp;v=UcqRXTriUVI&amp;feature=emb_logo\">https://www.youtube.com/watch?time_continue=3&amp;v=UcqRXTriUVI&amp;feature=emb_logo</a></li>  <li><a href=\"https://levelup.gitconnected.com/wait-what-happens-when-my-react-native-application-starts-an-in-depth-look-inside-react-native-5f306ef3250f\">https://levelup.gitconnected.com/wait-what-happens-when-my-react-native-application-starts-an-in-depth-look-inside-react-native-5f306ef3250f</a></li>  <li><a href=\"https://www.raywenderlich.com/1227-javascriptcore-tutorial-for-ios-getting-started\">https://www.raywenderlich.com/1227-javascriptcore-tutorial-for-ios-getting-started</a></li>  <li><a href=\"https://www.youtube.com/watch?v=_IiDHmAPH28\">https://www.youtube.com/watch?v=_IiDHmAPH28</a></li></ul><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/view.png\" alt=\"Octocat\" /></span></p><h1 id=\"lets-understand-what-happens-when-a-user-starts-running-a-react-native-app\">Let’s understand what happens when a user starts running a react-native app</h1><p>To run the application one of the following commands is issued via the command-line interface (CLI): <code class=\"highlighter-rouge\">react-native run-ios</code> or <code class=\"highlighter-rouge\">react-native run-android</code></p><ul>  <li>This command runs at the native entry point thread (native thread) on which your Android (Java/Kotlin) or IOS (Swift/Objective C) app is running. This thread is automatically assigned by the phone’s operating system.</li></ul><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/process.png\" alt=\"Octocat\" /></span></p><blockquote>  <p>The native thread (or main thread) has access to what the user is seeing. All events (touch event, timer event, network request event…) are listened on the native side.</p></blockquote><ul>  <li>    <p>The command creates a RootView (RCTRootView) that gives everything visible to the user.</p>  </li>  <li>    <p>The RootView creates the Bridge Interface.</p>  </li></ul><blockquote>  <p>The Bridge takes care of the communication by serializing it through JSON messages (on the native side and on the JavaScript side) so that it can pass across. This communication is actually quite similar to a client (native thread) and a server (JS thread).</p></blockquote><ul>  <li>    <p>The Bridge Interface will send messages to create the JavaScript (JS) thread to execute the code that is written in react-native.</p>  </li>  <li>    <p>Once the Bridge passes serialized payload to JavaScript, Event is processed and your application logic comes into play.</p>  </li></ul><blockquote>  <p>Like all JavaScript virtual machines, this JS thread is an event loop where your react application lives, API calls are made, touch events are interpreted, etc. It will start loading JS bundles into a single main.bundle.js file by compiling it into EcmaScript 5 using babel (Babel JavaScript compiler).</p></blockquote><ul>  <li>When React starts rendering it sends the changes to another thread: the Shadow thread.</li></ul><blockquote>  <p>React-native uses flexbox to style and position the elements in the screen. But the native UI has his own layout system so it does not understand flexbox. This is why react-native has created his own library called yoga to translate the flexbox css to the mobile layout.</p></blockquote><blockquote>  <p>The shadow thread is like a mathematical engine which finally decides on how to compute the view positions in a tree of nodes, like the html.</p></blockquote><p><span style=\"display:block;text-align:center\"> <img src=\"/assets/img/native.png\" alt=\"drawing\" width=\"900\" /></span></p><blockquote>  <p>Let’s look at this code as an example:</p></blockquote><p>```jsx let d const App = props = { return ( <View> <Text>Hello there</Text> </View> ) }</p><p>```</p><blockquote>  <p>If the JS thread wants a view and text to be created it will batch the request into a single message and send it across to the shadow thread to interpret the positions for the native thread. Then the message will be rendered to the Native thread to render the the UI.</p></blockquote><p><code class=\"highlighter-rouge\">&lt;View /&gt;</code> or <code class=\"highlighter-rouge\">&lt;TextInput /&gt;</code> or <code class=\"highlighter-rouge\">&lt;Text/&gt;</code> are special components compiled into native code. The <code class=\"highlighter-rouge\">&lt;View&gt;</code> component will be linked to android.view for android and UIView for ios. <code class=\"highlighter-rouge\">&lt;TextInput&gt;</code> will be linked to EditText for android and UITextField for IOS.</p><ul>  <li>Since only the main thread is able to render something on the screen, shadow thread should send generated layout to the main thread, and only then UI renders.</li></ul>",
                "url": "http://localhost:4000/posts/2019/10/15/how-does-react-native-works/",
                
                                
                
                "tags": ["technology"],
                "date_published": "2019-10-15T12:18:00+02:00",
                "date_modified": "2019-10-15T12:18:00+02:00",
                
                "author":  "Felix Lambert" 
                
            },
        
            {
                "title": "Pourquoi les inégalités sont aussi importantes aujourd'hui?",
                "content_text": "Sources:  Peter Hershock on diversity.  https://link.springer.com/content/pdf/10.1007%2Fs13347-011-0021-z.pdfConstat actuel : les milliardaires du monde entier possèdent plus de richesses que 60 % de la population mondiale et le patrimoine des 1 % les plus riches ont doublé en moins de 30 ans. La richesse des 50 % les plus pauvres a plus ou moins stagné.C’est un constat alarmant, mais le pire est que 1.000.000.000 de personnes se couchent le soir en ayant faim. Ceci ne peut pas être accepté et si ces inégalités sont aussi importantes aujourd’hui, c’est parce qu’il y a quelque chose dans nos valeurs, liées à notre environnement qui soutient ces inégalités.Pour que ça change, les humains doivent déclencher les 3 principaux mécanismes de la compassion:  Une nuisance très sérieuse se passe aujourd’hui chez un humain ou un groupe d’humains  Cette nuisance n’est pas méritée. Ce n’est pas de leur faute.  Si ces personnes sont plus épanouies, ça me rendra plus épanoui.Ce quelque chose doit être remis en question et ne doit plus être considéré comme une valeur positive. Il faut savoir critiquer les valeurs liées à notre environnement, qu’elles soient religieuses, familiales, économique…L’individualisme est probablement une bonne valeur mais elle nous a proposé une conception du monde qui consiste à séparer radicalement le “Moi” des autres. Chaque action individuelle influence l’interconnectivité entre les personnes. Les valeurs, les actions, d’un humain ne s’arrêtent pas à ce seul humain. Elles interagissent et influencent sans cesse les actions, les valeurs des autres et réciproquement. Quelques exemples :      la crise immobilière de 2008 a créé une crise mondiale        un humain qui passe à moto très vite en ville avec un moteur très bruyant influence l’environnement tout entier dans lequel il se retrouve. Il communique aux autres un style de vie. Cette forme de communication est essentielle. Il faut l’évaluer profondément et éventuellement la changer.  Il faut prendre conscience que les dynamismes du changement peuvent aujourd’hui venir de partout, de chaque individu. La qualité du web par exemple se construit en fonction de la qualité des contributions des personnes. Alors que faire concrètement ?      Le plus important est de dire non au pouvoir en tant qu’idéologie. Ce jeu du pouvoir et du contrôle est un jeu qui génère des gagnants et des perdants. Et on a l’impression qu’on est bloqué avec ça. Lorsqu’on se retrouve dans une organisation un peu autoritaire avec un pouvoir vertical, proposons de la diversité, de nouveaux comportements pour offrir aux personnes de nouvelles opportunités d’actions. Le cœur de la diversité est l’idée de la dynamique créatrice entre l’acceptation totale et le rejet total, que les confucéens considèrent comme essentielle à l’épanouissement humain. Cherchons donc à agir de manière à ce que notre différence soit une valeur pour les autres.        Inventons, créons de nouvelles règles du jeu où l’on cherche à jouer avec tous ses membres, sans qu’il y ait de fin, en faisant en sorte que ce jeu soit intéressant pour tout le monde. Un joueur de qualité est un joueur qui cherche à bien improviser pour proposer de la diversité dans ce jeu. Il faut faire plus que “tolérer” les différences entre les personnes, il faut les favoriser, car la différence est une opportunité, une possibilité, pour faire découvrir aux autres de nouvelles valeurs, de nouvelles perspectives sur les choses, de nouvelles possibilités d’harmonisations. C’est une relation émergente qualitative qui arrive dans un contexte donné. Mais il faut en même temps trouver des engagements que l’on partage sans que ce soit en fonction d’une idée commune d’épanouissement (sinon on risque de tomber dans une idéologie).        Mais ATTENTION: il ne faut pas forcer la diversité, il faut créer les conditions qui favorisent cette diversité.  ",
                "content_html": "<p>Sources:</p><ul>  <li><a href=\"https://www.youtube.com/watch?v=d-qmvvzBANY&amp;t=364s\">Peter Hershock on diversity</a>.</li>  <li><a href=\"https://link.springer.com/content/pdf/10.1007%2Fs13347-011-0021-z.pdf\">https://link.springer.com/content/pdf/10.1007%2Fs13347-011-0021-z.pdf</a></li></ul><p>Constat actuel : les milliardaires du monde entier possèdent plus de richesses que 60 % de la population mondiale et le patrimoine des 1 % les plus riches ont doublé en moins de 30 ans. La richesse des 50 % les plus pauvres a plus ou moins stagné.</p><p>C’est un constat alarmant, mais le pire est que 1.000.000.000 de personnes se couchent le soir en ayant faim. Ceci ne peut pas être accepté et si ces inégalités sont aussi importantes aujourd’hui, c’est parce qu’il y a quelque chose dans nos valeurs, liées à notre environnement qui soutient ces inégalités.</p><p>Pour que ça change, les humains doivent déclencher les 3 principaux mécanismes de la compassion:</p><ol>  <li>Une nuisance très sérieuse se passe aujourd’hui chez un humain ou un groupe d’humains</li>  <li>Cette nuisance n’est pas méritée. Ce n’est pas de leur faute.</li>  <li>Si ces personnes sont plus épanouies, ça me rendra plus épanoui.</li></ol><p>Ce quelque chose doit être remis en question et ne doit plus être considéré comme une valeur positive. Il faut savoir critiquer les valeurs liées à notre environnement, qu’elles soient religieuses, familiales, économique…</p><p>L’individualisme est probablement une bonne valeur mais elle nous a proposé une conception du monde qui consiste à séparer radicalement le “Moi” des autres. Chaque action individuelle influence l’interconnectivité entre les personnes. Les valeurs, les actions, d’un humain ne s’arrêtent pas à ce seul humain. Elles interagissent et influencent sans cesse les actions, les valeurs des autres et réciproquement. Quelques exemples :</p><ul>  <li>    <p>la crise immobilière de 2008 a créé une crise mondiale</p>  </li>  <li>    <p>un humain qui passe à moto très vite en ville avec un moteur très bruyant influence l’environnement tout entier dans lequel il se retrouve. Il communique aux autres un style de vie. Cette forme de communication est essentielle. Il faut l’évaluer profondément et éventuellement la changer.</p>  </li></ul><p>Il faut prendre conscience que les dynamismes du changement peuvent aujourd’hui venir de partout, de chaque individu. La qualité du web par exemple se construit en fonction de la qualité des contributions des personnes. Alors que faire concrètement ?</p><ol>  <li>    <p>Le plus important est de dire non au pouvoir en tant qu’idéologie. Ce jeu du pouvoir et du contrôle est un jeu qui génère des gagnants et des perdants. Et on a l’impression qu’on est bloqué avec ça. Lorsqu’on se retrouve dans une organisation un peu autoritaire avec un pouvoir vertical, proposons de la diversité, de nouveaux comportements pour offrir aux personnes de nouvelles opportunités d’actions. Le cœur de la diversité est l’idée de la dynamique créatrice entre l’acceptation totale et le rejet total, que les confucéens considèrent comme essentielle à l’épanouissement humain. Cherchons donc à agir de manière à ce que notre différence soit une valeur pour les autres.</p>  </li>  <li>    <p>Inventons, créons de nouvelles règles du jeu où l’on cherche à jouer avec tous ses membres, sans qu’il y ait de fin, en faisant en sorte que ce jeu soit intéressant pour tout le monde. Un joueur de qualité est un joueur qui cherche à bien improviser pour proposer de la diversité dans ce jeu. Il faut faire plus que “tolérer” les différences entre les personnes, il faut les favoriser, car la différence est une opportunité, une possibilité, pour faire découvrir aux autres de nouvelles valeurs, de nouvelles perspectives sur les choses, de nouvelles possibilités d’harmonisations. C’est une relation émergente qualitative qui arrive dans un contexte donné. Mais il faut en même temps trouver des engagements que l’on partage sans que ce soit en fonction d’une idée commune d’épanouissement (sinon on risque de tomber dans une idéologie).</p>  </li>  <li>    <p>Mais ATTENTION: il ne faut pas forcer la diversité, il faut créer les conditions qui favorisent cette diversité.</p>  </li></ol>",
                "url": "http://localhost:4000/posts/2019/10/14/valuing-diversity/",
                
                                
                
                "tags": ["philosophy"],
                "date_published": "2019-10-14T12:18:00+02:00",
                "date_modified": "2019-10-14T12:18:00+02:00",
                
                "author":  "Felix Lambert" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "hello jekyll",
                "title": "Hello Jekyll",
                "content_text": "Text can be bold, italic, strikethrough or keywordLink to another page.There should be whitespace between paragraphs.There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project.Header 1This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.Header 2  This is a blockquote following a header.  When something is important enough, you do it even if the odds are not in your favor.Header 3// Javascript code with syntax highlighting.var fun = function lang(l) {  dateformat.i18n = require('./lang/' + l)  return true;}# Ruby code with syntax highlightingGitHubPages::Dependencies.gems.each do |gem, version|  s.add_dependency(gem, \"= #{version}\")endHeader 4  This is an unordered list following a header.  This is an unordered list following a header.  This is an unordered list following a header.Header 5  This is an ordered list following a header.  This is an ordered list following a header.  This is an ordered list following a header.Header 6            head1      head two      three                  ok      good swedish fish      nice              out of stock      good and plenty      nice              ok      good oreos      hmm              ok      good zoute drop      yumm      There’s a horizontal rule below this.Here is an unordered list:  Item foo  Item bar  Item baz  Item zipAnd an ordered list:  Item one  Item two  Item three  Item fourAnd a nested list:  level 1 item          level 2 item      level 2 item                  level 3 item          level 3 item                      level 1 item          level 2 item      level 2 item      level 2 item        level 1 item          level 2 item      level 2 item        level 1 itemSmall imageLong, single-line code blocks should not wrap. They should horizontally scroll if they are too long.Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long.The final element.",
                "content_html": "<p>Text can be <strong>bold</strong>, <em>italic</em>, <del>strikethrough</del> or <code class=\"highlighter-rouge\">keyword</code></p><p><a href=\"./another-page.html\">Link to another page</a>.</p><p>There should be whitespace between paragraphs.</p><p>There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project.</p><h1 id=\"header-1\">Header 1</h1><p>This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.</p><h2 id=\"header-2\">Header 2</h2><blockquote>  <p>This is a blockquote following a header.</p>  <p>When something is important enough, you do it even if the odds are not in your favor.</p></blockquote><h3 id=\"header-3\">Header 3</h3><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Javascript code with syntax highlighting.</span><span class=\"kd\">var</span> <span class=\"nx\">fun</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">lang</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">dateformat</span><span class=\"p\">.</span><span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./lang/</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">l</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Ruby code with syntax highlighting</span><span class=\"no\">GitHubPages</span><span class=\"o\">::</span><span class=\"no\">Dependencies</span><span class=\"p\">.</span><span class=\"nf\">gems</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">gem</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">|</span>  <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">add_dependency</span><span class=\"p\">(</span><span class=\"n\">gem</span><span class=\"p\">,</span> <span class=\"s2\">\"= </span><span class=\"si\">#{</span><span class=\"n\">version</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span><span class=\"k\">end</span></code></pre></div></div><h4 id=\"header-4\">Header 4</h4><ul>  <li>This is an unordered list following a header.</li>  <li>This is an unordered list following a header.</li>  <li>This is an unordered list following a header.</li></ul><h5 id=\"header-5\">Header 5</h5><ol>  <li>This is an ordered list following a header.</li>  <li>This is an ordered list following a header.</li>  <li>This is an ordered list following a header.</li></ol><h6 id=\"header-6\">Header 6</h6><table>  <thead>    <tr>      <th style=\"text-align: left\">head1</th>      <th style=\"text-align: left\">head two</th>      <th style=\"text-align: left\">three</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">ok</td>      <td style=\"text-align: left\">good swedish fish</td>      <td style=\"text-align: left\">nice</td>    </tr>    <tr>      <td style=\"text-align: left\">out of stock</td>      <td style=\"text-align: left\">good and plenty</td>      <td style=\"text-align: left\">nice</td>    </tr>    <tr>      <td style=\"text-align: left\">ok</td>      <td style=\"text-align: left\">good <code class=\"highlighter-rouge\">oreos</code></td>      <td style=\"text-align: left\">hmm</td>    </tr>    <tr>      <td style=\"text-align: left\">ok</td>      <td style=\"text-align: left\">good <code class=\"highlighter-rouge\">zoute</code> drop</td>      <td style=\"text-align: left\">yumm</td>    </tr>  </tbody></table><h3 id=\"theres-a-horizontal-rule-below-this\">There’s a horizontal rule below this.</h3><hr /><h3 id=\"here-is-an-unordered-list\">Here is an unordered list:</h3><ul>  <li>Item foo</li>  <li>Item bar</li>  <li>Item baz</li>  <li>Item zip</li></ul><h3 id=\"and-an-ordered-list\">And an ordered list:</h3><ol>  <li>Item one</li>  <li>Item two</li>  <li>Item three</li>  <li>Item four</li></ol><h3 id=\"and-a-nested-list\">And a nested list:</h3><ul>  <li>level 1 item    <ul>      <li>level 2 item</li>      <li>level 2 item        <ul>          <li>level 3 item</li>          <li>level 3 item</li>        </ul>      </li>    </ul>  </li>  <li>level 1 item    <ul>      <li>level 2 item</li>      <li>level 2 item</li>      <li>level 2 item</li>    </ul>  </li>  <li>level 1 item    <ul>      <li>level 2 item</li>      <li>level 2 item</li>    </ul>  </li>  <li>level 1 item</li></ul><h3 id=\"small-image\">Small image</h3><p><img src=\"https://www.codingindian.codes/assets/uploads/pro.jpg\" alt=\"Octocat\" /></p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long.Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long.</code></pre></div></div><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The final element.</code></pre></div></div>",
                "url": "http://localhost:4000/2019-11-11-Jekyll.html",
                "date_published": "2018-10-09T00:00:00+02:00",
                "date_modified": "2018-10-09T00:00:00+02:00"
            },
        
            {
                "id": "how does react-hooks work?",
                "title": "How does react-hooks work?",
                "content_text": "SOURCE:  https://reactjs.org/docs/hooks-intro.html  https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo  https://medium.com/@morgler/dont-use-redux-9e23b5381291  https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook–a4983397Why react-hooks?React hooks has been created to avoid developers introducing too much abstraction with a separate state management library (redux, mobx…). That often requires to jump between different files, write excessive amounts of code and lose time.const ComponentWithHook = () =&gt; {  const [count, setCount] = React.useState(0);  const [bool, setBool] = React.useState(false);  React.useEffect(() =&gt; {}, [count, bool]);  const child = React.useRef();  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;;};ReactDOM.render(&lt;ComponentWithHook /&gt;, document.getElementById(\"root\"));ComponentWithHook is a function which returns an object (all JXS calls are translated into objects by this babel plugin). On the first render of a component, a linked list of the Hooks called gets created.{  memoizedState: 0, // the setCount hook  baseState: 0,  queue: { /* ... */},  baseUpdate: null,  next: { // the setBool hook    memoizedState: false,    baseState: false,    queue: { /* ... */},    baseUpdate: null,    next: { // the useEffect hook      memoizedState: {        tag: 192,        create: () =&gt; {},        destory: undefined,        deps: [0, false],        next: { /* ... */}      },      baseState: null,      queue: null,      baseUpdate: null,      next: { // the useRef hook        memoizedState: {          current: undefined        },        baseState: null,        queue: null,        baseUpdate: null,      }    }  }}Hooks are stored according to their calling order in a linked list of fiber objects to represent the entire DOM. A fiber is an object that is mutable and holds component state that preserves from re-renders. Every component has a corresponding fiber object. Each node has its data and also a reference that points to the next node in the list. The order of nodes is entirely dependent on each node’s reference to the next.",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://reactjs.org/docs/hooks-intro.html\">https://reactjs.org/docs/hooks-intro.html</a></li>  <li><a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo\">https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;feature=emb_logo</a></li>  <li><a href=\"https://medium.com/@morgler/dont-use-redux-9e23b5381291\">https://medium.com/@morgler/dont-use-redux-9e23b5381291</a></li>  <li><a href=\"https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook--a4983397\">https://www.newline.co/@CarlMungazi/a-journey-through-the-usestate-hook–a4983397</a></li></ul><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/reactlifecycle.png\" alt=\"Octocat\" /></span></p><p>Why react-hooks?</p><p><span style=\"display:block;text-align:center\"><img src=\"/assets/img/reacthooks.png\" alt=\"Octocat\" /></span></p><p>React hooks has been created to avoid developers introducing too much abstraction with a separate state management library (redux, mobx…). That often requires to jump between different files, write excessive amounts of code and lose time.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">ComponentWithHook</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">bool</span><span class=\"p\">,</span> <span class=\"nx\">setBool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>  <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{},</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">bool</span><span class=\"p\">]);</span>  <span class=\"kd\">const</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useRef</span><span class=\"p\">();</span>  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setCount</span><span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"na\">Count</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/button&gt;</span><span class=\"err\">;</span><span class=\"p\">};</span><span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ComponentWithHook</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">root</span><span class=\"dl\">\"</span><span class=\"p\">));</span></code></pre></div></div><p>ComponentWithHook is a function which returns an object (all JXS calls are translated into objects by this babel plugin). On the first render of a component, a linked list of the Hooks called gets created.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>  <span class=\"nl\">memoizedState</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"c1\">// the setCount hook</span>  <span class=\"nx\">baseState</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"nx\">queue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span><span class=\"p\">},</span>  <span class=\"nx\">baseUpdate</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"nx\">next</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\">// the setBool hook</span>    <span class=\"nl\">memoizedState</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>    <span class=\"nx\">baseState</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>    <span class=\"nx\">queue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span><span class=\"p\">},</span>    <span class=\"nx\">baseUpdate</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>    <span class=\"nx\">next</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\">// the useEffect hook</span>      <span class=\"nl\">memoizedState</span><span class=\"p\">:</span> <span class=\"p\">{</span>        <span class=\"nl\">tag</span><span class=\"p\">:</span> <span class=\"mi\">192</span><span class=\"p\">,</span>        <span class=\"nx\">create</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{},</span>        <span class=\"nx\">destory</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span>        <span class=\"nx\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">],</span>        <span class=\"nx\">next</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span><span class=\"p\">}</span>      <span class=\"p\">},</span>      <span class=\"nx\">baseState</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>      <span class=\"nx\">queue</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>      <span class=\"nx\">baseUpdate</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>      <span class=\"nx\">next</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\">// the useRef hook</span>        <span class=\"nl\">memoizedState</span><span class=\"p\">:</span> <span class=\"p\">{</span>          <span class=\"nl\">current</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span>        <span class=\"p\">},</span>        <span class=\"nx\">baseState</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>        <span class=\"nx\">queue</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>        <span class=\"nx\">baseUpdate</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>      <span class=\"p\">}</span>    <span class=\"p\">}</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Hooks are stored according to their calling order in a linked list of fiber objects to represent the entire DOM. A fiber is an object that is mutable and holds component state that preserves from re-renders. Every component has a corresponding fiber object. Each node has its data and also a reference that points to the next node in the list. The order of nodes is entirely dependent on each node’s reference to the next.</p>",
                "url": "http://localhost:4000/2020-01_06-how-does-react-hooks-work.html",
                "date_published": "2020-01-31T11:18:00+01:00",
                "date_modified": "2020-01-31T11:18:00+01:00"
            },
        
            {
                "id": "book review > the ethics of ordinary technology by michel puech",
                "title": "Book review > The Ethics Of Ordinary Technology by Michel Puech",
                "content_text": "SOURCE:  https://books.google.fr/books/about/The_Ethics_of_Ordinary_Technology.html?id=-QERDAAAQBAJ&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y#v=onepage&amp;q&amp;f=false  https://www.amazon.com/Ordinary-Technology-Routledge-Studies-Science/dp/1138659347  http://michel.puech.free.fr/We need to focus today and have more attention of the ordinary. The author thinks that it’s in the ordinary that we can cultivate wisdom, not in the extroardinary.But what is the ordinary?The ordinary is the real life we live in. It’s our daily tools and technologies we live with every day. It’s something like the coffee machine, the computer you work with every day, your hoover, or the shower you use… We need to give all our attention (or awareness) on these ordinary things.What is the extraordinary?The easiest way of having a good representation of the extraordinary is by paying attention to the media or the ads you’re seeing every day in your ordinary life.",
                "content_html": "<p>SOURCE:</p><ul>  <li><a href=\"https://books.google.fr/books/about/The_Ethics_of_Ordinary_Technology.html?id=-QERDAAAQBAJ&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y#v=onepage&amp;q&amp;f=false\">https://books.google.fr/books/about/The_Ethics_of_Ordinary_Technology.html?id=-QERDAAAQBAJ&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y#v=onepage&amp;q&amp;f=false</a></li>  <li><a href=\"https://www.amazon.com/Ordinary-Technology-Routledge-Studies-Science/dp/1138659347\">https://www.amazon.com/Ordinary-Technology-Routledge-Studies-Science/dp/1138659347</a></li>  <li><a href=\"http://michel.puech.free.fr/\">http://michel.puech.free.fr/</a></li></ul><p>We need to focus today and have more attention of the ordinary. The author thinks that it’s in the ordinary that we can cultivate wisdom, not in the extroardinary.</p><p>But what is the ordinary?</p><p>The ordinary is the real life we live in. It’s our daily tools and technologies we live with every day. It’s something like the coffee machine, the computer you work with every day, your hoover, or the shower you use… We need to give all our attention (or awareness) on these ordinary things.</p><p>What is the extraordinary?</p><p>The easiest way of having a good representation of the extraordinary is by paying attention to the media or the ads you’re seeing every day in your ordinary life.</p>",
                "url": "http://localhost:4000/2020-08-13-ethics-of-ordinary-technologies.html",
                "date_published": "2020-08-13T12:18:00+02:00",
                "date_modified": "2020-08-13T12:18:00+02:00"
            },
        
            {
                "id": "404",
                "title": 404,
                "content_text": "  Go back",
                "content_html": "<blockquote>  <p>Go <a href=\"/\">back</a></p></blockquote>",
                "url": "http://localhost:4000/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "felix lambert",
                "title": "Felix Lambert",
                "content_text": "EN: I started at Epitech (European Institute of Technology), a very pragmatic programming school. I know how to develop a project independently. I like to learn, I am curious, and I appreciate dynamic and harmonious atmospheres.Skilled in Node.js, react.js, react-native connected objets and Cloud Computing.I have a real passion for javascript, machine learning, and I’m open to all forms of innovation. I’m always eager to learn new things. My skills range from front-end design and development to back-end systems solutions, and server administration.What can I do?  Site / server migration  Server installation  Back-End Developers  Front-End developers / web integrators  HostingFR: Issue d’Epitech, je sais développer un projet de façon autonome. J’aime apprendre, je suis curieux, et j’apprécie les atmosphères dynamiques et harmonieuses. Do not hesitate to contact me so that you can tell me about your project.Je suis un passionné de javascript, du machine learning, et je suis ouvert à toutes formes d’innovations. N’hésitez pas à me contacter pour que vous puissiez me parler de votre projet. Sinon bonne navigation à vous.Qu’est ce que je peux faire?  Migration site / serveur  Installation serveur  Développeurs Back-End  Développeurs Front-End / intégrateurs web  Webmasters  HébergementsMes spécialités:  Javascript  Node.JS  React.JS  React-Native  Firebase  CSS3  HTML5  MySQL  MongoDB  gitConnaissances:  docker  administration système  IoTLangues:  Français natif  Anglais bilingue  Coréen débutantFor collaboration:            Email                  lambertfelixpro@gmail.com      My GithubMaltIMPORTANT:  dans la mesure où mes informations personnelles sont utilisées et partagées sans mon consentement, je bloque systématiquement les appels des agences de recrutement  le PHP, Laravel, CMS wordpress ne correspond pas à mes compétences",
                "content_html": "<p>EN: I started at Epitech (European Institute of Technology), a very pragmatic programming school. I know how to develop a project independently. I like to learn, I am curious, and I appreciate dynamic and harmonious atmospheres.</p><p>Skilled in Node.js, react.js, react-native connected objets and Cloud Computing.</p><p>I have a real passion for javascript, machine learning, and I’m open to all forms of innovation. I’m always eager to learn new things. My skills range from front-end design and development to back-end systems solutions, and server administration.</p><p>What can I do?</p><ul>  <li>Site / server migration</li>  <li>Server installation</li>  <li>Back-End Developers</li>  <li>Front-End developers / web integrators</li>  <li>Hosting</li></ul><p>FR: Issue d’Epitech, je sais développer un projet de façon autonome. J’aime apprendre, je suis curieux, et j’apprécie les atmosphères dynamiques et harmonieuses. Do not hesitate to contact me so that you can tell me about your project.</p><p>Je suis un passionné de javascript, du machine learning, et je suis ouvert à toutes formes d’innovations. N’hésitez pas à me contacter pour que vous puissiez me parler de votre projet. Sinon bonne navigation à vous.</p><p>Qu’est ce que je peux faire?</p><ul>  <li>Migration site / serveur</li>  <li>Installation serveur</li>  <li>Développeurs Back-End</li>  <li>Développeurs Front-End / intégrateurs web</li>  <li>Webmasters</li>  <li>Hébergements</li></ul><p>Mes spécialités:</p><ul>  <li>Javascript</li>  <li>Node.JS</li>  <li>React.JS</li>  <li>React-Native</li>  <li>Firebase</li>  <li>CSS3</li>  <li>HTML5</li>  <li>MySQL</li>  <li>MongoDB</li>  <li>git</li></ul><p>Connaissances:</p><ul>  <li>docker</li>  <li>administration système</li>  <li>IoT</li></ul><p>Langues:</p><ul>  <li>Français natif</li>  <li>Anglais bilingue</li>  <li>Coréen débutant</li></ul><p>For collaboration:</p><table>  <thead>    <tr>      <th style=\"text-align: left\">Email</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">lambertfelixpro@gmail.com</td>    </tr>  </tbody></table><p><a href=\"http://github.com/voold\">My Github</a><a href=\"https://www.malt.fr/profile/felixlambert1\">Malt</a></p><p>IMPORTANT:</p><ul>  <li>dans la mesure où mes informations personnelles sont utilisées et partagées sans mon consentement, je bloque systématiquement les appels des agences de recrutement</li>  <li>le PHP, Laravel, CMS wordpress ne correspond pas à mes compétences</li></ul>",
                "url": "http://localhost:4000/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "http://localhost:4000/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "blog",
                "title": "Blog",
                "content_text": "{% for post in site.posts %}{{post.title}}{%endfor%}",
                "content_html": "{% for post in site.posts %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a>{%endfor%}",
                "url": "http://localhost:4000/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "http://localhost:4000/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "http://localhost:4000/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "http://localhost:4000/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}